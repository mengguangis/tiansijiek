structure




[Add]
face normals:  calculated by vertex normal ? cross product of edges
isFrontFace:

updateIsFrontFace()
{
	//call this each time when mouse moves
	for each face in face list
	{
		if(dot(facenormal, viewVector) < 0)
		{
			isFrontFace[i] = true;
		}
		else
		{
			isFrontFace[i] = false;
		}
	}
}

//viewVector: constant (center - camPosition)

[Add]
edge
2d position of endpoints  // to see if endpoints of two different edges are close enough in 2d poistion
group number // linking stage
isSilhouette
face[2] // face index
int passCounter // weather to remove the edge or cut in the middle

silhouette edges

for(all silhouette edges)
{
	if(group number = 0)
	{
		while(searchIndex < endofedgeindex)
		{

		}
	}
}

//draw silhouette

//only when draw silhouette is checked, get silhouette drawn and silhouette edges calculated.



Silhouette Culling Step [FAILED]
Since we are drawing silhouette based on the object. We cannot use webgl's own depth test to cull those back silhouette. So, based on the paper, we'll have to implement the silhouette culling step by ourselves.
What the paper did is to store the 2d position of both end points of the edge as well as the depth value in the data structure. And use the depth buffer data to compare. If pass didn't pass the depth test, then eliminate the edge.
However, webgl is only 1.0 version which means it has a lot of limitations.
For example, in order to get the depth value from depth buffer, I'll have to use the function readpixels. This function, the problem is that the function supported by webgl can only receive UNSIGNED_BYTE data type. Which means all the floating point data supposed to be pass out will be clamped into integers, which results in a very big, unignorable error. 

Since in order to achieve the effect we want, we just cannot ignore the silhouette culling step. Thus, the solution (the only solution) I'm thinking of is that:

first render the non-culled silhouette into framebuffer. And render the depth value of those points into another framebuffer as well.
Also render the depth value of the triangle mesh into a third framebuffer.
And based on this three texture, draw the final image with quad. Just like what deferred is doing. 
This method may solve the problem visually. However, it will end up with a low speed, probably when the scene becomes more complicated.:(
But compared with no back silhouette culling, this could be a good solution :) 




//datastructure support
https://github.com/mauriciosantos/buckets




need edges 2d information (which is in Texture)


Find silhouette vertex

add more sampler to quad shader

add draw mode to sil shader